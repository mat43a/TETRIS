using System;
using System.Linq;
using System.Threading;
using System.Text;
 
namespace Tetris
{
    class Tetris
    {
        class Piece
        {
            private int[] x = new int[4];
            private int[] y = new int[4];
            private char c;
            private ConsoleColor color;
            private int formIndex;
            private int rotationCount;
            public bool isFinal;
 
            public Piece(int offset)
            {
                Random ranGen = new Random();
                int currFormIndex = ranGen.Next(0, forms.GetLength(0));
                this.c = (char)forms[currFormIndex, 8];
                this.color = formColors[forms[currFormIndex, 9]];
                for (int i = 0; i < 4; i++)
                {
                    this.x[i] = forms[currFormIndex, i] + offset;
                    this.y[i] = forms[currFormIndex, i + 4] + 1;
                }
                this.isFinal = false;
                this.formIndex = currFormIndex;
                this.rotationCount = 0;
            }
 
            public void Rotate()
            {
                for (int i = 0; i < 4; i++)
                {
                    this.x[i] += rotation[this.formIndex, this.rotationCount % 4, i];
                    this.y[i] += rotation[this.formIndex, this.rotationCount % 4, i + 4];
                }
                this.rotationCount++;
            }
 
            public void Move(ConsoleKeyInfo pressedKey)
            {
                if (pressedKey.Key == ConsoleKey.RightArrow)
                {
                    if (isPossible('R'))
                    {
                        for (int i = 0; i < 4; i++)
                        {   
                                this.x[i]++;
                            }
                        }
                }
                else if (pressedKey.Key == ConsoleKey.LeftArrow)
                {
                    if (isPossible('L'))
                    {
                        for (int i = 0; i < 4; i++)
                        {
                                this.x[i]--;
                            }
                        }
                }
                else if (pressedKey.Key == ConsoleKey.R)
                {
                    if(isPossible('T'))
                    {
                    Rotate();
                    }
                }
                else if(pressedKey.Key == ConsoleKey.DownArrow)
                    while (!isStopped())
                    {
                        for (int i = 0; i < 4; i++)
                        {
                            this.y[i]++;
                        }
                    }
            }
 
            private bool isStopped()
            {
                for (int i = 0; i < 4; i++)
                {
                    if (this.y[i] + 1 == field.GetLength(0) - 1 || field[this.y[i] + 1, this.x[i], 0] != 0)
                    {
                        this.isFinal = true;
                        return true;
                    }
                }
                return false;
            }
 
            private bool isPossible(char c)
            {
                switch (c)
                {
                    case 'L':
                        {
                            for (int i = 0; i < 4; i++)
                            {
                                if (this.x[i] - 1 < 1 || field[this.y[i], this.x[i] - 1, 0] != 0)
                                {
                                    return false;
                                }
                            }
                            return true;
                        }
                    case 'R':
                        {
                            for (int i = 0; i < 4; i++)
                            {
                                if (this.x[i] + 1 > field.GetLength(1) - 2 || field[this.y[i], this.x[i] + 1, 0] != 0)
                                {
                                    return false;
                                }
                            }
                            return true;
                        }
                    default:
                        {
                            for (int i = 0; i < 4; i++)
                            {
                                if (this.y[i] - 2 < 1 || this.y[i] + 2 > field.GetLength(0) - 1 || this.x[i] - 2 < 1 || this.x[i] + 2 > field.GetLength(1) - 1 || field[this.y[i] + rotation[this.formIndex, this.rotationCount % 4, i + 4], this.x[i] + rotation[this.formIndex, this.rotationCount % 4, i], 0] != 0)
                                {
                                    return false;
                                }
                            }
                            return true;
                        }
                }
            }
 
            public void Move()
            {
                if (!isStopped())
                {
                    for (int i = 0; i < 4; i++)
                    {
                        this.y[i]++;
                    }
                }
                else
                {
                    for (int i = 0; i < 4; i++)
                    {
                        field[this.y[i], this.x[i],0] = 1;
                        field[this.y[i], this.x[i], 1] = (byte)Array.IndexOf(formColors,this.color);
                    }
                }
            }
 
            public void Draw()
            {
                for (int i = 0; i < 4; i++)
                {
                    DrawCharOnPosition(this.x[i], this.y[i], this.c, this.color);
                }
            }
 
            public void Clean()
            {
                for (int i = 0; i < 4; i++)
                {
                    DrawCharOnPosition(this.x[i], this.y[i], this.c, ConsoleColor.Black);
                }
            }
        }
 
        public static void DrawCharOnPosition(int x, int y, char c, ConsoleColor color)
        {
            Console.SetCursorPosition(x, y);
            Console.ForegroundColor = color;
            Console.Write(c);
        }
 
        public static void RemoveScrollBars(int width, int heigth)
        {
            Console.BufferHeight = Console.WindowHeight = heigth;       //clear the left scroll bar
            Console.BufferHeight = Console.WindowWidth = width;         //clear the down scroll bar
        }
 
        static void DrawField()
        {
            for (int i = 0; i < field.GetLength(0); i++)
            {
                DrawCharOnPosition(0, i, '|', ConsoleColor.White);
                DrawCharOnPosition(field.GetLength(1) - 1, i, '|', ConsoleColor.White);
            }
            for (int i = 1; i < field.GetLength(1) - 1; i++)
            {
                DrawCharOnPosition(i, 0, '=', ConsoleColor.White);
                DrawCharOnPosition(i, field.GetLength(0) - 1, '=', ConsoleColor.White);
            }
            for (int i = 0; i < field.GetLength(1); i++)
